#! /bin/sh

# Author:  Thomas DEBESSE <dev@illwieckz.net>
# License: ISC

tab="$(printf '\t')"

test -f /etc/dpm-query/dpm.cfg && . /etc/dpm-query/dpm.cfg
sys_dpm_cards="${dpm_cards:-all}"
sys_dpm_level="${dpm_level:-auto}"
sys_dpm_state="${dpm_state:-balanced}"

_logger () {
	while read line
	do
		printf '%s\n' "${line}"
		if [ -z "${AS_SERVICE}" ]
		then
			printf '%s\n' "${line}" | logger -t "$(basename "${0}")" | 2>&1
		fi
	done
}

_test_card () {
	[ -d "/sys/class/drm/card${1}" ]
}

_test_dpm_available () {
	[ -f "/sys/class/drm/card${1}/device/power_method" ]
}

_test_dpm_enabled () {
	[ "$(cat "/sys/class/drm/card${1}/device/power_method")" = 'dpm' ]
}

_check_card () {
	if ! _test_card "${1}"
	then
		printf 'ERROR: missing card%s\n' "${1}" | _logger
		exit 11
	fi
}

_check_dpm () {
	if ! _test_dpm_available "${1}"
	then
		printf 'ERROR: dpm not available for card %s\n' "${1}" | _logger
		exit 12
	elif ! _test_dpm_enabled "${1}"
	then
		printf 'ERROR: dpm not enabled for card %s\n' "${1}" | _logger
		exit 13
	fi
}

_list_cards () {
	if [ "${1}" = 'default' ]
	then
		cards="${sys_dpm_cards:-all}"
	else
		cards="${1}"
	fi

	case "${cards}" in
		'all')
			for card in $(ls -d '/sys/class/drm/card'[0-9] | cut -c20-)
			do
				if _test_dpm_available "${card}"
				then
					if _test_dpm_enabled "${card}"
					then
						printf '%s\n' "${card}"
					fi
				fi
			done
		;;
		*)
			echo "${cards}" | tr ',' '\n'
		;;
	esac
}

_get () {
	printf 'card%s/%s: "%s"\n' "${1}" "${2}" "$(cat "/sys/class/drm/card${1}/device/${2}")" | _logger
}

_set () {
	if echo "${3}" > "/sys/class/drm/card${1}/device/${2}"
	then
		printf 'card%s/%s="%s"\n' "${1}" "${2}" "${3}" | _logger
		true
	else
		printf 'ERROR: card%s/%s does not accept "%s"\n' "${1}" "${2}" "${3}" | _logger
		false
	fi
}

_test_permission () {
	touch "/sys/class/drm/card${1}/device/${2}" 2>/dev/null
}

if [ "${AS_INCLUDE}" = 'yes' ]
then
	return
fi

_help () {
	cat <<-EOF
	usage: ${0} <action> [cards] [level] [state]

	action:
	${tab}get            (get DPM profile from selected cards)
	${tab}set            (set DPM profile on selected cards)
	${tav}test           (test if you can set profile on selected cards)
	${tab}help           (print this help)

	cards:
	${tab}default        (${sys_dpm_cards})
	${tab}all
	${tab}0
	${tab}0,1

	level:
	${tab}default        (${sys_dpm_level})
	${tab}auto
	${tab}low
	${tab}high

	state:
	${tab}default        (${sys_dpm_state})
	${tab}balanced
	${tab}battery
	${tab}performance

	EOF

	exit 0
}

case "${1}" in
	'get')
		cards="${2:-default}"
		for card in $(_list_cards "${cards}")
		do
			_check_card "${card}"
			_check_dpm "${card}"
		
			_get "${card}" 'power_dpm_force_performance_level' || exit 21
			_get "${card}" 'power_dpm_state' || exit 22
		done
	;;
	'set')
		cards="${2:-default}"
		for card in $(_list_cards "${cards}")
		do
			_check_card "${card}"
			_check_dpm "${card}"

			if [ -z "${3}" ]
			then
				user_dpm_level="${sys_dpm_level}"
			else
				user_dpm_level="${3}"
			fi

			if [ -z "${4}" ]
			then
				user_dpm_state="${sys_dpm_state}"
			else
				user_dpm_state="${4}"
			fi

			if _test_permission "${card}" 'power_dpm_force_performance_level'
			then
				_set "${card}" 'power_dpm_force_performance_level' "${user_dpm_level}"
			else
				printf 'ERROR: write forbidden for card%s/power_dpm_force_performance_level\n' "${card}"
				exit 31
			fi

			if _test_permission "${card}" 'power_dpm_state'
			then
				_set "${card}" 'power_dpm_state' "${user_dpm_state}"
			else
				printf 'ERROR: write forbidden for card%s/power_dpm_state\n' "${card}"
				exit 32
			fi
		done
	;;
	'test')
		cards="${2:-default}"
		for card in $(_list_cards "${cards}")
		do
			_check_card "${card}"
			_check_dpm "${card}"

			forbidden='false'
			for option in 'power_dpm_force_performance_level' 'power_dpm_state'
			do
				if ! _test_permission "${card}" 'power_dpm_force_performance_level'
				then
					printf 'card%s/%s: "forbidden"\n' "${card}" "${option}"
					forbidden='true'
				else
					printf 'card%s/%s: "allowed"\n' "${card}" "${option}"
				fi
			done
		done

		if [ "${forbidden}" = 'true' ]
		then
			return 41
		fi
	;;
	*)
		_help
	;;
esac

#EOF
